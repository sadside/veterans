---
import Layout from '@/layouts/Layout.astro';
import '../../../styles/global.css';
import { VeteransSearch } from '@/features/veterans/VeteransSearch';
import { VeteransList } from '@/widgets/veterans/ui/VeteransList';
import { fetchVeterans } from '@/shared/api/fetchVeterans';

// Получение параметров из URL
const url = new URL(Astro.request.url);
const page = url.searchParams.get('page') ? Number(url.searchParams.get('page')) : 1;
const search = url.searchParams.get('search') || '';

// Получаем параметр is_vov_veteran из URL или устанавливаем по умолчанию для страницы прокуратуры
const is_vov_veteran_param = url.searchParams.get('is_vov_veteran');
const is_vov_veteran = is_vov_veteran_param === null ? false : is_vov_veteran_param === 'true';

// Серверный запрос данных
const veteransData = await fetchVeterans({
    page,
    page_size: 12,
    search,
    is_vov_veteran,
});

// Расчёт общего количества страниц
const totalPages = Math.ceil(veteransData.count / 12);

// Базовый URL для пагинации
const baseUrl = url.pathname;
---

<Layout>
    <div class="page-container py-8">
        <!-- Заголовок страницы -->
        <div class="flex items-center mb-8">
            <div class="text-blue-600 mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-award">
                    <circle cx="12" cy="8" r="6"></circle>
                    <path d="M15.477 12.89 17 22l-5-3-5 3 1.523-9.11"></path>
                </svg>
            </div>
            <h1 class="text-3xl font-bold">Члены Совета Ветеранов Прокуратуры Новосибирской области</h1>
        </div>
        
        <!-- Блок поиска и фильтрации -->
        <VeteransSearch 
            client:load
            initialSearch={search}
            currentFilter={is_vov_veteran}
            isWwPage={false}
        />
        
        <!-- Информация о количестве найденных ветеранов -->
        <div class="my-6 flex items-center text-gray-600">
            <div class="mr-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users">
                    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                    <circle cx="9" cy="7" r="4"></circle>
                    <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                    <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
            </div>
            <span>Найдено: {veteransData.count} ветеранов</span>
        </div>
        
        <!-- Список ветеранов -->
        <VeteransList 
            client:load
            veterans={veteransData.results}
            currentPage={page}
            totalPages={totalPages}
            onPageChange={(newPage) => {
                // Создаём прямые URL для пагинации
                let newUrl = new URL(window.location.href);
                newUrl.searchParams.set('page', newPage.toString());
                window.location.href = newUrl.toString();
            }}
            isLoading={false}
        />
    </div>
</Layout>

<style>
/* Стили удалены, поскольку теперь используется page-container из global.css */
</style>

<script>
// Добавляем прямые обработчики для кнопок пагинации
document.addEventListener('DOMContentLoaded', () => {
    // Находим все кнопки пагинации
    const paginationButtons = document.querySelectorAll('[aria-label^="Страница"], [aria-label="Предыдущая страница"], [aria-label="Следующая страница"]');
    
    // Добавляем обработчики событий
    paginationButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Используем типизированный элемент вместо this
            const buttonElement = e.currentTarget as HTMLButtonElement;
            
            // Получаем номер страницы из атрибута
            let page = buttonElement.getAttribute('data-page');
            if (!page) {
                // Для кнопок "Предыдущая" и "Следующая"
                const currentPage = parseInt(new URLSearchParams(window.location.search).get('page') || '1');
                if (buttonElement.getAttribute('aria-label') === 'Предыдущая страница') {
                    page = Math.max(currentPage - 1, 1).toString();
                } else if (buttonElement.getAttribute('aria-label') === 'Следующая страница') {
                    page = (currentPage + 1).toString();
                }
            }
            
            if (page) {
                // Обновляем URL и перезагружаем страницу
                const url = new URL(window.location.href);
                url.searchParams.set('page', page);
                window.location.href = url.toString();
            }
        });
    });
});
</script> 